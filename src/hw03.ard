\import Utils
\import hw02 (fac)
\import lect03 (M5, fileTest)

-- 1. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
  | true => idp
  | false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
  | true => idp
  | false => idp

-- 2. Докажите, что fac 3 равно 6.

\func fac3_eq_6 : fac 3 = 6 => idp

-- 3. Докажите следующие пропозициональные тавтологии.

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (g' g))
    \where
      \func g' {P Q R : \Type} (g : P -> R) (p : P) (q : Q) : R => g p

-- 4. Сформулируйте и докажите следующие пропозициональные тавтологии.

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (pq : \Sigma P Q) : R => f pq.1 pq.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (f : Either P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => ((f' f), (f'' f))
  \where {
    \func f' {P Q : \Type} (f : Either P Q -> \Sigma P Q) (p : P) => (f (inl p)).2
    \func f'' {P Q : \Type} (f : Either P Q -> \Sigma P Q) (q : Q) => (f (inr q)).1
  }

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q => f (\lam g => g (\lam p => f (\lam k => p)))

-- 5. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam k => h (3, k)

-- 6. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 {n : Nat} (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> P x -> Q x) (existance : P n) : \Sigma (x : Nat) (Q x) => (n, h n existance)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> (Either (P x -> Empty) (Q x -> Empty))) : P 3 -> (Q 3 -> Empty) => \case (h 3)
  \with {
    | inl a => \lam (p : P 3) => absurd (a p)
    | inr b => \lam (p : P 3) => b
  }

-- 7. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTestNormalForm : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 8. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func M5_t'''NormalForm : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 9. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | cons a l => pmap (cons a) (++-assoc l ys zs)