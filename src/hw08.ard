\import Prelude
\import hw06 (AllMatched, Matched, NotMatched, Sublist, sublist_filter)
\import lect05 (+-comm, true/=false)
\import lect06 (filter)
\import lect08
\import Utils
\open Nat(+,*)

-- 1. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--    Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id' (\level (\suc \lp) _) (id' (\level (\suc \lp) _)  id)
\func idTest2 : \Type \lp -> \Type \lp => id' (\level (\suc \lp) _) Maybe
\func idTest3 : \Type (\suc \lp) => id' (\level (\suc (\suc \lp)) _) Functor
\func idTest4 : \Type (\suc \lp) => id' (\level (\suc (\suc \lp)) _) (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Type \lp} -> (A -> B) -> Maybe A -> Maybe B) : \Type \lp => id' (\level (\suc \lp) _) (Functor Maybe f)

-- 2. Определите div через Nat-ind.

--\func div (x y : Nat) => div' x x y
--  \where
--    \func div' (s x y : Nat) : Nat \elim s
--      | 0 => 0
--      | suc s => if (x < y) 0 (suc (div' s (x - y) y))

\func \infixl 6 - (x y : Nat) : Nat
  | 0, _ => 0
  | suc x, 0 => suc x
  | suc x, suc 0 => x -- cludge used only as support in this proof
  | suc x, suc y => x - y

\func n<=sucn (n : Nat) : n <= suc n
  | 0 => Nat.zero<=_
  | suc n => Nat.suc<=suc (n<=sucn n)

\func zero<suc (n : Nat) : 0 < suc n \elim n
  | 0 => <=-refl
  | suc n => <=-trans (zero<suc n) (n<=sucn (suc n))

\func div (n k : Nat) (p : 0 < k) : Nat => Nat-ind (\lam _ => Nat) (helper k p) n
    \where
      \func helper (k : Nat) (p : 0 < k) (n : Nat) (pr : \Pi (k : Nat) -> k < n -> Nat) : Nat
        | suc n, Nat.suc<=suc <, 0, pr => 0
        | suc k, p, suc n, pr => \case totality (suc n) k \with {
          | inl n<k => 0
          | inr b => (pr (suc n - suc k) (lem (suc n) (suc k) (zero<suc n) p)) + 1
        }
        \where {
          \func lem (n k : Nat) (pn : 0 < n) (pk : 0 < k) : n - k < n
            | suc n, suc k, pn, pk => lem2 n k

          \func lem2 (n k : Nat) : suc n - suc k < suc n
            | 0, 0 => Nat.suc<=suc Nat.zero<=_
            | 0, suc n => Nat.suc<=suc Nat.zero<=_
            | suc n, 0 => Nat.suc<=suc <=-refl
            | suc n, suc k => <=-trans (lem2 n k) (n<=sucn (suc n))
        }

\func test_div_0 : div 1 2 (Nat.suc<=suc Nat.zero<=_) = 0 => idp
\func test_div_1 : div 2 2 (Nat.suc<=suc Nat.zero<=_) = 1 => idp
\func test_div_2 : div 5 2 (Nat.suc<=suc Nat.zero<=_) = 2 => idp
\func test_div_3 : div 6 2 (Nat.suc<=suc Nat.zero<=_) = 3 => idp


-- 3. Докажите следующий принцип индукции для списков.

\func <zero {n : Nat} (p : n < 0) : Empty \elim p

\func List-ind
  {A : \Type}
  (E : List A -> \Type)
  (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
  (xs : List A) : E xs \elim xs
  | nil => r nil (\lam ys p => absurd (<zero p))
  | cons a l => aux E r (cons a (cons a l)) (cons a l) <=-refl
    \where
      \func aux {A : \Type}
                (E : List A -> \Type)
                (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
                (xs zs : List A) (p : length zs < length xs): E zs \elim xs, p
        | cons a l, Nat.suc<=suc zs<=xs => r zs (\lam  ys ys<zs => aux E r l ys (<=-trans ys<zs zs<=xs))

-- 4. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условия:
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs

-- from hw06
\func sublist_filter' {A : \Type} : \Pi (xs : List A) -> \Pi (p : A -> Bool) -> Sublist (filter p xs) xs => sublist_filter

\data AllSatisfy {A : \Type} (xs : List A) (p : A -> Bool) \elim xs
  | nil => nil-satisfy
  | cons a xs => satisfy (p a = true) (AllSatisfy xs p)

\func satisfy_filter {A : \Type} : \Pi (xs : List A) -> \Pi (p : A -> Bool) -> AllSatisfy (filter p xs) p
  => \lam xs p => helper xs p
      \where
        \func helper {A : \Type } (xs : List A) (p : A -> Bool) : AllSatisfy (filter p xs) p \elim xs
          | nil => nil-satisfy
          | cons a tail => \case p a \as b, idp : p a = b \return AllSatisfy (\case b \with { | true => cons a (filter p tail) | false => filter p tail} ) p \with {
            | true, eq => satisfy eq (helper tail p)
            | false, _ => helper tail p
          }

\func satisfying_sublist_filter {A : \Type} : \Pi (xs ys : List A) -> \Pi (p : A -> Bool) -> Sublist ys xs -> AllSatisfy ys p -> Sublist ys (filter p xs)
  => \lam xs ys p sublist allsatisfy => helper xs ys p sublist allsatisfy
      \where
        \func helper {A : \Type} (xs ys : List A) (p : A -> Bool) (sublist : Sublist ys xs) (allsatisfy : AllSatisfy ys p) : Sublist ys (filter p xs) \elim xs, ys, sublist, allsatisfy
          | nil, nil, AllMatched, nil-satisfy => AllMatched
          | cons a l, nil, AllMatched, nil-satisfy => AllMatched
          | cons a l, nil, NotMatched s, nil-satisfy => AllMatched
          | cons x xs, cons y ys, Matched y=x s, satisfy py=true a => \case p x \as b, idp : p x = b \return Sublist (cons y ys) (\case b \with { | false => filter p xs | true => cons x (filter p xs) }) \with {
            | true, _ => Matched y=x (helper xs ys p s a)
            | false, px=false => absurd (true/=false ((sym py=true) *> (pmap p y=x) *> px=false))
          }
          | cons x xs, cons y ys, NotMatched s, satisfy py=true a => \case p x \as b \return Sublist (cons y ys) (\case b \with { | false => filter p xs | true => cons x (filter p xs) }) \with {
            | true => NotMatched (helper xs (cons y ys) p s (satisfy py=true a))
            | false => helper xs (cons y ys) p s (satisfy py=true a)
          }

-- 5. Бонусное задание: докажите корректность любого алгоритма сортировки, отличного от сортировки вставками.

--\func extract_min {A : TotalPreorder} (list : List A) (current_min : A) : \Sigma A (List A) => extract_min' list current_min nil
--  \where
--    \func extract_min' {A : TotalPreorder} (list : List A) (min : A) (rest : List A) : \Sigma A (List A) \elim list
--      | nil => (min, rest)
--      | cons a tail => \case totality min a \with {
--        | inl _ => extract_min' tail min (cons a rest)
--        | inr _ => extract_min' tail a (cons min rest)
--      }
--
--
--\func length {A : \Type } (list : List A)  : Nat
--  | nil => 0
--  | cons _ tail => length tail + 1
--
--\func extract_min_length_lem {A : TotalPreorder} (list : List A) (current_min : A) : length list = length (extract_min list current_min).2
--  => extract_min'_length_lem list current_min nil
--      \where
--        \func extract_min'_length_lem {A : TotalPreorder} (list : List A) (min : A) (rest : List A) : length list + length rest = length ((extract_min.extract_min' list min rest).2)
--          | nil, min, nil => idp
--          | nil, min, cons a l => pmap suc (+-comm 0 (length l))
--          | cons a l, min, nil => \case totality min a \as b \return (suc (length l) = length (\case b \with {| inl _ => extract_min.extract_min' l min (cons a nil) | inr _ => extract_min.extract_min' l a (cons min nil) }).2) \with {
--            | inl a => {?}
--            | inr b => {?}
--          }
--          | cons a l, min, cons a1 l1 => {?}
--
---- selection sort
--\func sort {A : TotalPreorder} (list : List A): List A => sort' list (suc (length list)) (<=-refl)
--  \where
--    \func sort' {A : TotalPreorder} (list : List A) (max_depth : Nat) (dp : length list < max_depth) : List A
--      | nil, suc n, Nat.suc<=suc < => nil
--      | cons a tail, suc max_depth, Nat.suc<=suc dp => \let (min, rest) => extract_min tail a
--                                       \in cons min (sort' rest max_depth {?})

