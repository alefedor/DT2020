\import Utils
\import hw05 (zero/=suc)
\import lect02 ()
\import lect11

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int \elim x
  | pos n => \case \elim n \with {
    | 0 => neg 1
    | suc n => pos (suc n)
  }
  | neg n => neg (suc n)

\func negPred_test0 : negPred (pos 0) = neg 1 => idp
\func negPred_test1 : negPred (pos 1) = pos 1 => idp
\func negPred_test2 : negPred (neg 1) = neg 2 => idp

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int
  | pos n, pos m => pos (n Nat.+ m)
  | pos n, neg (suc m) => \case n lect02.< (suc m) \with {
    | lect02.Bool.false => pos (n lect02.- suc m)
    | lect02.Bool.true => neg (suc m lect02.- n)
  }
  | neg (suc n), pos m => \case m lect02.< (suc n) \with {
    | lect02.Bool.false => pos (m lect02.- suc n)
    | lect02.Bool.true => neg (suc n lect02.- m)
  }
  | neg (suc n), neg (suc m) => neg ((suc n) Nat.+ (suc m))

\func \infixl 7 * (x y : Int) : Int
  | pos n, pos m => pos (n Nat.* m)
  | pos n, neg (suc m) => neg (n Nat.* suc m)
  | neg (suc n), pos m => neg ((suc n) Nat.* m)
  | neg (suc n), neg (suc m) => pos ((suc n) Nat.* suc m)

\func +_test0 : neg 1 + pos 1 = pos 0 => idp
\func +_test1 : neg 2 + pos 1 = neg 1 => idp
\func +_test2 : pos 2 + pos 1 = pos 3 => idp
\func +_test3 : neg 1 + neg 3 = neg 4 => idp

\func *_test0 : neg 1 * neg 1 = pos 1 => idp
\func *_test1 : pos 2 * neg 1 = neg 2 => idp
\func *_test2 : neg 3 * neg 2 = pos 6 => idp
\func *_test3 : neg 6 * pos 0 = pos 0 => idp

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | zero
  | n*2 (n : BinNat) \elim n {
    | zero => zero
  }
  | n*2+1 (n : BinNat)

\func z0 => zero
\func z1 => n*2 zero

\func BinNat_test : z0 = z1 => idp

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam x => in (suc x, idp)

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty => \case p 0 \with {
  | in e => zero/=suc e.1 (sym e.2)
}

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f)
  => \lam x => \case q x \with { | in a => \case p a.1 \with { | in b => in (b.1, pmap g b.2 *> a.2) } }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g
  => \lam x => \case p x \with { | in a => in (f a.1, a.2) }

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\func EqList {A : \Set} (xs ys : List A) => \Pi (x : A) -> In x xs <-> In x ys

\func Set (A : \Set) : \Set => Quotient (List A) EqList

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => {?}

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => {?}

-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
