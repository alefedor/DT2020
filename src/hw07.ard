\import Utils
\import hw02 (gcd)
\import hw05 (pmap2)
\import hw06 (ReflTransClosure, Sym, Trans)
\import lect05 (funExt)
\import lect06 (Decide, no, yes)
\import lect07

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair {
    | fst_ => b
    | snd_ => a
  }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair { | fst_ => p.snd_ | snd_ => p.fst_}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p \elim p
  | (a,b) => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => p.p

\func one-isPos : PosNat 1 => \new PosNat 1 ()

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record CoprimeNats {
  | A : Nat
  | B : Nat
  | proof : gcd A B = 1
}

\func Coprime60Nat => CoprimeNats { | B => 60 }

-- 5. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\func TT {A : \Type} (a : List A) : \Type \elim a
  | nil => \Sigma
  | cons _ _ => Empty

\func head {A : \Type} (b : A) (l : List A) : A \elim l
  | nil => b
  | cons a l => a

\func tail {A : \Type} (l : List A) : List A \elim l
  | nil => nil
  | cons a l => l

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => \lam a b => helper dec a b
  \where
    \func helper {A : \Type} (dec : Eq A) (a b : List A) : Decide (a = b) \elim a, b
      | nil, nil => yes idp
      | nil, cons a l => no (\lam p => transport TT p ())
      | cons a l, nil => no (\lam p => transport TT (sym p) ())
      | cons a l, cons b t =>
          \case decideEq a b \with {
            | yes y => \case helper dec l t \with {
              | yes y' => yes (transport (\lam (x : List A) => cons a l = cons b x) y' (transport (\lam (x : A) => cons a l = cons x l) y idp ))
              | no n => no (\lam f => n (pmap tail f))
            }
            | no n => no (lemma n l t)
          }
      \where
        \func lemma {A : \Type} {a b : A} (p : a = b -> Empty) (l : List A) (t : List A) : cons a l = cons b t -> Empty
          => \lam f => p (pmap (head a) f)

-- 6. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 2 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  -- Monad laws
  | left-identity {A B : \Type} (a : A) (f : A -> F B) : (return a) >>= f = f a
  | right-identity {A : \Type} (m : F A) : m >>= return = m
  | associativity {A B C : \Type} (m : F A) (f : A -> F B) (g : B -> F C) : m >>= f >>= g = m >>= (\lam x => f x >>= g)
  -- Functor fields
  | fmap {A B : \Type} (f : A -> B) (m : F A) => m >>= (\lam x => return (f x))
  | fmap-id {A : \Type} (y : F A) => right-identity y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A) =>
      fmap (\lam x => g (f x)) y ==< sym (pmap (\lam x => y >>= x) (funExt (\lam x => F C) (\lam x => left-identity (f x) (\lam x => return (g x))))) >==
      (y >>= (\lam x => return (f x) >>= (\lam x => return (g x)))) ==< sym (associativity y (\lam x => return (f x)) (\lam x => return (g x))) >==
      fmap g (fmap f y) `qed

-- 7. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return => just
  | \infixl 2 >>= {A B : \Type} (x : Maybe A) (f : A -> Maybe B) : Maybe B \elim x {
    | nothing => nothing
    | just a => f a
  }
  | left-identity a f => idp
  | right-identity {A : \Type} (m : Maybe A) : m >>= just = m \elim m {
    | nothing => idp
    | just x => idp
  }
  | associativity {A B C : \Type} (m : Maybe A) (f : A -> Maybe B) (g : B -> Maybe C) : m >>= f >>= g = m >>= (\lam x => f x >>= g) \elim m {
    | nothing => idp
    | just x => idp
  }

-- 8. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Type ): Monad (\lam A => State S A)
  | return x => \new State { | state s => (s, x) }
  | >>= x f => \new State { | state s => state { f (state {x} s).2} (state {x} s).1}
  | left-identity a f => idp
  | right-identity m => idp
  | associativity m f g => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\func State'_to_State {S A : \Type} (s : State' S A): State S A
  | state' x => \new State { | state => x}

\func State_to_State' {S A : \Type} (s : State S A): State' S A => state' (s.state)

\func rev-lem-s'-s {S A : \Type} (s : State S A) : s = State'_to_State (State_to_State' s) \elim  s
  | (state) => idp

\func rev-lem-s-s' {S A : \Type} (s : State' S A) : s = State_to_State' (State'_to_State s) \elim s
  | state' _x => idp

\instance State'Monad (S : \Type): Monad (\lam A => State' S A)
  | return x => State_to_State' (return x)
  | >>= x f => State_to_State' (>>= (State'_to_State x) (\lam t => State'_to_State (f t)))
  | left-identity a f => pmap State_to_State' (left-identity a (\lam t => State'_to_State (f t))) *> sym (rev-lem-s-s' (f a))
  | right-identity m => pmap State_to_State' (right-identity (State'_to_State m)) *> sym (rev-lem-s-s' m)
  | associativity m f g => idp

-- 9. Определите \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => var
  | \infixl 2 >>= {A B : \Type} (x : Term A) (f : A -> Term B) : Term B \elim x {
    | var v => f v
    | unit => unit
    | app t t1 => app (t >>= f) (t1 >>= f)
    | lam t => lam (t >>= shiftUpF f)
  }
  | left-identity a f => idp
  | right-identity {A : \Type} (m : Term A) : m >>= var = m \with {
    | var v => idp
    | unit => idp
    | app t t1 => pmap2 app (right-identity t) (right-identity t1)
    | lam t => pmap lam (shiftUpLem t)
  }
  | associativity {A B C : \Type} (m : Term A) (f : A -> Term B) (g : B -> Term C) : m >>= f >>= g = m >>= (\lam x => f x >>= g) \with {
    | var v, f, g => idp
    | unit, f, g => idp
    | app t t1, f, g => pmap2 app (associativity t f g) (associativity t1 f g)
    | lam t, f, g => pmap lam (associativity t (shiftUpF f) (shiftUpF g) *> (pmap (\lam x => t >>= x) (shiftUpFLem t f g)))
  }
  \where {
    \func shiftUp {A : \Type} (t : Term A) : Term (Maybe A)
      | var v => var (just v)
      | unit => unit
      | app t t1 => app (shiftUp t) (shiftUp t1)
      | lam t => lam (shiftUp t)

    \func shiftUpF {A B : \Type} (f : A -> Term B) (a : Maybe A) : Term (Maybe B)
      | f, nothing => var nothing
      | f, just a => shiftUp (f a)

    \func shiftUpLem {A : \Type} (t : Term (Maybe A)) : t >>= shiftUpF var = t
      | var v => \case \elim v \with {
        | nothing => idp
        | just a => idp
      }
      | unit => idp
      | app t t1 => pmap2 app (shiftUpLem t) (shiftUpLem t1)
      | lam t => pmap lam (lem t *> shiftUpLem t)
        \where {
          \func lem {A : \Type} (t : Term (Maybe (Maybe A))) : t >>= shiftUpF (shiftUpF var) = t >>= shiftUpF var =>
            transport (\lam x => t >>= shiftUpF x = t >>= shiftUpF var) (sym lem2) idp

          \func lem2 {A : \Type} : shiftUpF {A} {A} var = var =>
            funExt {Maybe A} (\lam x => Term (Maybe A)) {(shiftUpF {A} {A} var)} {var} (lem3)

          \func lem3 {A : \Type} (x : Maybe A) : (shiftUpF {A} {A} var) (x) = var x \elim x
            | nothing => idp
            | just a => idp
        }

    \func shiftUpFLem {A B C : \Type} (t : Term (Maybe A)) (f : A -> Term B)  (g : B -> Term C) : (\lam x => shiftUpF f x >>= shiftUpF g) = shiftUpF (\lam x => f x >>= g)
      => funExt (\lam x => Term (Maybe C)) (lem t f g)
          \where {
            \func lem {A B C : \Type} (t : Term (Maybe A)) (f : A -> Term B)  (g : B -> Term C) (x : Maybe A) : shiftUpF f x >>= shiftUpF g = shiftUpF (\lam x => f x >>= g) x
              | _, f, g, nothing => idp
              | _, f, g, just a => (lem2 f g a)
            \func lem2 {A B C : \Type} (f : A -> Term B) (g : B -> Term C) (a : A) : shiftUp (f a) >>= shiftUpF g = shiftUp (f a >>= g) => lem3 (f a) g
            \func lem3 {B C : \Type} (b : Term B) (g : B -> Term C) : shiftUp b >>= shiftUpF g = shiftUp (b >>= g) \elim b
              | var v => idp
              | unit => idp
              | app t t1 => pmap2 app (lem3 t g) (lem3 t1 g)
              | lam t => pmap lam (lem3 t (shiftUpF g))
          }

  }

-- 10. Определите отношение многошаговой редукции на Term.

\func Red {V : \Type} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 11. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--     Определите любую стратегию редукции.

\func strategy {V : \Type} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) => {?}

-- 12. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1  {U : \Type} (ctx : U -> Type) (A B : Type) (a : Term U) (hasa : hasType ctx a A) (b : Term (Maybe U)) (hasb : hasType (maybe A ctx) b B)
  : hasType ctx (b >>= maybe a var) B => {?}

-- 13. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim r
  | Sym = => transport (\lam x => hasType ctx x A) = h
  | Trans z r r1 => redLem r1 (lem r h)
    \where
      \func lem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A) : hasType ctx a' A \elim a, a', r, A, h
        | app t t1, var v, beta f = =1, A, appType {Tp} h h1 => transport (\lam x => hasType ctx x A) =1 (substLem1 ctx Tp A t1 h f (getLeftArr f (lem2 f t = h1)))
        | app t t1, unit, beta f = =1, A, appType {Tp} h h1 => transport (\lam x => hasType ctx x A) =1 (substLem1 ctx Tp A t1 h f (getLeftArr f (lem2 f t = h1)))
        | app t t1, app t2 t3, appLeft r =, Arr t4 t5, appType {Tp} h h1 => appType (transport (\lam x => hasType ctx x Tp) = h) (lem r h1)
        | app t t1, app t2 t3, appLeft r =, Unit, appType {Tp} h h1 => appType (transport (\lam x => hasType ctx x Tp) = h) (lem r h1)
        | app t t1, app t2 t3, appRight = r, Arr t4 t5, appType {Tp} h h1 => appType (lem r h) (transport (\lam x => hasType ctx x (Arr Tp (Arr t4 t5))) = h1)
        | app t t1, app t2 t3, appRight = r, Unit, appType {Tp} h h1 => appType (lem r h) (transport (\lam x => hasType ctx x (Arr Tp Unit)) = h1)
        | app t t1, app t2 t3, beta f = =1, A, appType {Tp} h h1 => transport (\lam x => hasType ctx x A) =1 (substLem1 ctx Tp A t1 h f (getLeftArr f (lem2 f t = h1)))
        | lam t, lam t1, lamRed r, Arr A A1, lamType l => lamType (lem r l)
        | app t t1, lam t2, beta f = =1, A, appType {Tp} h h1 => transport (\lam x => hasType ctx x A) =1 (substLem1 ctx Tp A t1 h f (getLeftArr f (lem2 f t = h1)))
        \where {
          \func getLeftArr {V : \Type} {ctx : V -> Type} {A Tp : Type} (t : Term (Maybe V)) (h : hasType ctx (lam t) (Arr Tp A)) : hasType (maybe Tp ctx) t A \elim h
            | lamType h => h

          \func lem2 {V : \Type} {ctx : V -> Type}  {A Tp : Type} (f : Term (Maybe V)) (t : Term V) (= : lam f = t) (h1 : hasType ctx t (Arr Tp A)) : hasType ctx (lam f) (Arr Tp A)
            => (transport (\lam x => hasType ctx x (Arr Tp A)) (sym =)  h1)
        }
-- 14. Закончите доказательство утверждения, что все типизируемые термы достижимы.

-- Это более общее утверждение необходимо для усиления индукционной гипотезы.
-- Для его доказательства потребуется вспомогательная лемма, которая говорит, что если термы a и b достижимы, и b[a/x] лежит в интерпретации B, то и (\x.b) a лежит в ней.
\func typeableInterp {V : \Type} (ctx : V -> Type) (env : V -> Term V) (C : \Pi (v : V) -> Interp (ctx v) (env v)) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T (t >>= env) => {?}

-- Это утверждение легко следует из предыдущего.
\func typeableInterpId {V : \Type} (ctx : V -> Type) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T t => {?}
