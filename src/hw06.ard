\import Prelude
\import Utils \hiding(<=-refl)
\import hw05 (pmap2, zero/=suc)
\import lect05 (+-comm, funExt)
\import lect06
\open Nat(+,*)

-- 1. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons a v => lem' (v v++ vnil) a (+-comm 0 n) *> pmap (vcons a) (vnil-rightId v)
  \where
    \func lem' {A : \Type} {n : Nat} (xs : Vec A n) (a : A) {x : Nat} (p : n = x)
      : transport (Vec A) (pmap suc p) (vcons a xs) = vcons a (transport (Vec A) p xs)
    \elim p
      | idp => idp

-- 2. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | cons x tail => In-head (x = a)
  | cons x tail => In-tail (In a tail)

-- 3. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'.

-- cycles:
-- (lessOrEq -> lessOrEq' -> LessOrEq -> lessOrEq)
-- (lessOrEq' -> LessOrEq' -> lessOrEq)

\func lessOrEq_to_lessOrEq' {n m : Nat} (p : lessOrEq n m) : lessOrEq' n m
  | {0}, {_}, p => ()
  | {suc n}, {0}, (a, k) => zero/=suc (a + n) (sym k *> +-comm (suc n) a)
  | {suc n}, {suc m}, (a, k) => \let p => suc (n + a) ==< pmap suc (+-comm n a) >==
                                          suc (a + n) ==< +-comm a (suc n) >==
                                          suc n + a ==< k >==
                                          suc m `qed
                                \in lessOrEq_to_lessOrEq' {n} {m} (a, pmap (\lam x => x - 1) p)

\func lessOrEq'_to_LessOrEq {n m : Nat} (p : lessOrEq' n m) : LessOrEq n m
  | {0}, {_}, p => z<=n
  | {suc n}, {suc m}, p => s<=s (lessOrEq'_to_LessOrEq p)

\func LessOrEq_to_lessOrEq {n m : Nat} (p : LessOrEq n m) : lessOrEq n m
  | {0}, {0}, z<=n => (0, idp)
  | {0}, {suc n}, z<=n => (suc n, idp *> pmap suc (+-comm 0 n))
  | {suc n}, {suc m}, s<=s l => \let a => LessOrEq_to_lessOrEq l
                                \in (a.1, lem a.2)
  \where
    \func lem {n m k : Nat} (p : n + m = k) : suc n + m = suc k
      => suc n + m ==< +-comm (suc n) m >==
         suc (m + n) ==< pmap suc (+-comm m n) >==
         suc (n + m) ==< pmap suc p

\func lessOrEq'_to_LessOrEq' {n m : Nat} (p : lessOrEq' n m) : LessOrEq' n m
  | {0}, {0}, p => <=-refl idp
  | {0}, {suc n}, p => <=-step (lessOrEq'_to_LessOrEq' p)
  | {suc n}, {suc m}, p => add_suc (lessOrEq'_to_LessOrEq' p)
    \where
      \func add_suc {n m : Nat} (p : LessOrEq' n m) : LessOrEq' (suc n) (suc m)
        | {_}, {_}, <=-refl = => <=-refl (pmap suc =)
        | {0}, {suc n}, <=-step l => <=-step (add_suc l)
        | {suc n}, {suc m}, <=-step l => <=-step (add_suc l)

\func LessOrEq'_to_lessOrEq {n m : Nat} (p : LessOrEq' n m) : lessOrEq n m
  | {_}, {_}, <=-refl = => (0, =)
  | {0}, {suc m}, <=-step l => (suc m, idp *> pmap suc (+-comm 0 m))
  | {suc n}, {suc m}, <=-step l => \let a => LessOrEq'_to_lessOrEq l
                                   \in (suc a.1, pmap suc a.2)

-- 4. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | Sym (x = y)
  | Trans (z : A) (R x z) (ReflTransClosure R z y)

-- 5. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y
  => \lam x y => (lem1 R x y, lem2 R refl trans x y)
  \where {
    \func lem1 {A : \Type} (R : A -> A -> \Type) (x y : A) : R x y -> ReflTransClosure R x y => \lam r => Trans y r (Sym idp)

    \func lem2 {A : \Type} (R : A -> A -> \Type)
                           (refl : \Pi (x : A) -> R x x)
                           (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
                           (x y : A) : ReflTransClosure R x y -> R x y
      => \lam r => helper R refl trans x y r
    \where
      \func helper {A : \Type} (R : A -> A -> \Type)
                               (refl : \Pi (x : A) -> R x x)
                               (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
                               (x y : A) (r : ReflTransClosure R x y) : R x y \elim r
        | Sym eq => transport (\lam y => R x y) eq (refl x)
        | Trans z r rtc => trans x z y r (helper R refl trans z y rtc)
  }

-- 6. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys".

\data Sublist {A : \Type} (xs ys : List A) \elim xs, ys
  | nil, _ => AllMatched
  | cons a xtail, cons b ytail => Matched (a = b) (Sublist xtail ytail)
  | xs, cons _ ytail => NotMatched (Sublist xs ytail)

-- 7. Докажите, что Sublist (filter p xs) xs для любых p и xs.

\func sublist_filter {A : \Type} : \Pi (xs : List A) -> \Pi (p : A -> Bool) -> Sublist (filter p xs) xs
  => \lam xs p => helper xs p
  \where
    \func helper {A : \Type } (xs : List A) (p : A -> Bool) : Sublist (filter p xs) xs \elim xs
      | nil => AllMatched
      | cons a tail => \case p a \as b \return Sublist (\case b \with { | true => cons a (filter p tail) | false => filter p tail} ) (cons a tail) \with {
        | true => Matched idp (helper tail p)
        | false => NotMatched (helper tail p)
      }

-- 8. Реализуйте любой алгоритм сортировки, используя \case для паттерн матчинга на результате сравнения элементов списка.

\func extract_min {A : \Type} (list : List A) (current_min : A) (less : A -> A -> Bool) : \Sigma A (List A) => extract_min' list less current_min nil
  \where
    \func extract_min' {A : \Type} (list : List A) (less : A -> A -> Bool) (min : A) (rest : List A) : \Sigma A (List A) \elim list
      | nil => (min, rest)
      | cons a tail => \case (less min a) \with {
        | true => (extract_min' tail less min (cons a rest))
        | false =>(extract_min' tail less a (cons min rest))
      }
\func length {A : \Type } (list : List A)  : Nat
  | nil => 0
  | cons _ tail => length tail + 1

-- selection sort
\func sort {A : \Type} (list : List A) (less : A -> A -> Bool) : List A => sort' list less (length list)
  \where
    \func sort' {A : \Type} (list : List A) (less : A -> A -> Bool) (max_depth : Nat) : List A
      | nil, _, _ => nil
      | _, _, 0 => nil
      | cons a tail, less, suc max_depth => \let (min, rest) => extract_min tail a less
                                            \in cons min (sort' rest less max_depth)

\func \infix 4 <p (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x <p y

\func test_sort : sort (cons 3 (cons 1 (cons 2 nil))) (<p) = (cons 1 (cons 2 (cons 3 nil))) => idp

-- 9. Определите filter через if, а не через \case.
--    Докажите для этой версии filter лемму filter-lem.

\func if {A : \Type} (x : Bool) (t e : A) : A \elim x
  | true => t
  | false => e

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons a l => if (p a) (cons a (filter' p l)) (filter' p l)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) Nat.<= length xs \elim xs
  | nil => Nat.zero<=_
  | cons a xs => \case p a \as b \return
  length (if b (cons a (filter' p xs)) (filter' p xs)) Nat.<= suc (length xs) \with {
    | true => Nat.suc<=suc (filter-lem p xs)
    | false => <=-helper (filter-lem p xs)
  }

-- 10. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции.

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x =>
  \case \elim x, f true \as p, idp : f true = p, f false \as q, idp : f false = q \with {
    | true, true, ft, _, _ => pmap (\lam x => f (f x)) ft *> pmap f ft
    | true, false, ft, true, ff => pmap (\lam x => f (f x)) ft *> pmap f ff
    | false, _, ft, false, ff => pmap (\lam x => f (f x)) ff *> pmap f ff
    | true, false, ft, false, ff => pmap (\lam x => f (f x)) ft *> helper f false ft ff (f false) true
    | false, true, ft, true, ff => pmap (\lam x => f (f x)) ff *> helper f true ft ff (f true) false
    | false, false, ft, true, ff => pmap (\lam x => f (f x)) ff *> pmap f ft
  } \where
    -- for constant function
    \func helper (f : Bool -> Bool)  (b : Bool) (ft : f true = b) (ff : f false = b) (x y : Bool) : f x = f y \elim x, y
      | true, true => idp
      | true, false => transport (\lam x => f true = x) (sym ff) ft
      | false, true => sym (transport (\lam x => f true = x) (sym ff) ft)
      | false, false => idp

-- 11. Парадокс Рассела показывает, что не существует множества всех множеств.
-- Если такое множеств существует, то мы можем определить множество B, состоящее из множеств, не содержащих себя.
-- Тогда B принадлежит себе тогда и только тогда, когда оно себе не принадлежит.
-- Отсюда следует противоречии.
-- Теорема Кантора утверждает, что не сущесвует множества X с сюръекцией из X в множество подмножеств X.
-- Ее доказательство также конструирует утверждение, которое верно тогда и только тогда, когда оно ложно.
-- Верно, что в общем случае существование такого утверждения влечет противоречие.
-- Это легко доказать при помощи исключенного третьего, но утверждение верно и без него.
-- Докажите этот факт.
\func contrProp {A : \Type} (p : A -> Not A) (q : Not A -> A) : Empty
  => p (q (\lam a => (p a) a)) (q (\lam a => (p a) a))

-- 12. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func \infixl 6 - (x y : Nat) : Nat
  | 0, _ => 0
  | suc x, 0 => suc x
  | suc x, suc 0 => x -- cludge used only as support in this proof
  | suc x, suc y => x - y

\func notIsEven (n : Nat) : (isEven (suc (2 * n))) -> Empty => \lam p => helper n p.1 p.2
    \where
      \func helper (n : Nat) (k : Nat) (p : suc (2 * n) = 2 * k) : Empty \elim n, k
        | 0, 0 => zero/=suc 0 (sym p)
        | 0, suc n => zero/=suc (2 * n) (pmap (\lam x => x - 1) p)
        | suc n, 0 => zero/=suc (suc (suc (2 * n))) (sym p)
        | suc n, suc k => helper n k (pmap (\lam x => x - 2) p)

\func isEven-dec : DecPred isEven => \lam (n : Nat) => helper n
    \where
      \func helper (n : Nat) : Decide (isEven n) => \case (parity n) \with {
        | even k p => yes (k, p)
        | odd k p => no (transport (\lam x => Not (isEven x)) (sym p) (notIsEven k))
      }

-- 13. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст, либо состоит из повторений одного элемента, либо в A существует два различных элемента.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
  | nil => empty idp
  | cons a nil => repeated 1 a idp
  | cons a (cons a' l) => \case (dec a a') \with {
    | yes eq => \case (lemma l {dec}) \with {
      | empty p => repeated 2 a (pmap (\lam x => cons a x) (helper (sym eq) p))
      | repeated n b p => \case (dec a b) \with {
        | yes eq' => repeated (n + 2) a (pmap (\lam x => cons a x) (helper (sym eq) p *> (pmap (\lam x => cons a x) (transport (\lam x => repeat n x = repeat n a) eq' idp))))
        | no n => A-is-not-trivial a b n
      }
      | A-is-not-trivial a a' p => A-is-not-trivial a a' p
    }
    | no n => A-is-not-trivial a a' n
  }
  \where
    \func helper {A : \Type} {a a' : A} {l l' : List A} (p : a = a') (q : l = l') : cons a l = cons a' l'
      => pmap2 (\lam x y => cons x y) p q

-- 14. Определите view, представляющий число в виде частного и остатка от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : r < m) (p : n = q * m + r)

\func \infix 4 <=p (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x <p y

\func decide<= (m n : Nat) : Either (m Nat.<= n) (m Nat.<= n -> Empty) => {?}

\func mod-view (m n : Nat) (t : 0 < m) : ModView m n \elim n
  | 0 => quot-rem 0 0 t (lemma m)
  | n => \case decide<= m n \with {
            | inl a => {?}
            | inr b => {?}
          }
  \where
    \func lemma (m : Nat) : 0 = 0 * m \elim m
      | 0 => idp
      | suc n => lemma n

\func div (n m : Nat) (t : 0 < m) : Nat => \case mod-view m n t \with {
  | quot-rem q r t p => q
}

-- 15. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p
  => funExt (\lam x => Bool) (\lam x => lem p x)
      \where
        \func lem {A : \Type} (p : A -> Bool) (a : A) : FromDecToBool (FromBoolToDec p) a = p a
          => \case (p a) \as b \return ((\case \case \elim b \return (Decide (T b)) \with { | false => no absurd  | true => yes () } \with { | no _ => false | yes _ => true }) = b) \with {
                | true => idp
                | false => idp
             }

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P))
  : \Pi (x : A) -> (FromBoolToDec (FromDecToBool P)).1 x <-> P.1 x
  => \lam x => (helper1 P x, helper2 P x)
  \where {
    \func helper1 {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) (x : A) : (FromBoolToDec (FromDecToBool P)).1 x -> P.1 x
      => \case P.2 x \as d \return (T (\case d \with { | yes a => true | no n => false }) -> P.1 x) \with {
            | yes a => \lam _ => a
            | no n => \lam x => absurd x
         }

    \func helper2 {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) (x : A) : P.1 x -> (FromBoolToDec (FromDecToBool P)).1 x
      => \case P.2 x \as d \return (P.1 x -> T (\case d \with { | yes a => true | no n => false })) \with {
        | yes a => \lam _ => ()
        | no n => \lam x => n x
      }
  }

